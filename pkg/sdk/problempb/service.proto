syntax = "proto3";

option go_package = "github.com/ecnuvj/vhoj_problem/pkg/sdk/problempb";

package sdk;

import "base/base.proto";
import "problempb/contest.proto";
import "problempb/problem.proto";
import "problempb/contest_problem.proto";
import "include/userpb/user.proto";

service ProblemService {
    rpc ListProblems(ListProblemsRequest) returns(ListProblemsResponse) {};
    rpc GetProblemById(GetProblemByIdRequest) returns(GetProblemByIdResponse) {};
    rpc SearchProblemByCondition(SearchProblemByConditionRequest) returns(SearchProblemByConditionResponse) {};
    rpc CreateContest(CreateContestRequest) returns(CreateContestResponse) {};
    rpc ListContests(ListContestsRequest) returns(ListContestsResponse) {};
    rpc SearchContestByCondition(SearchContestByConditionRequest) returns(SearchContestByConditionResponse) {};
    rpc GetContestById(GetContestByIdRequest) returns(GetContestByIdResponse) {};
    rpc AddContestParticipant(AddContestParticipantRequest) returns(AddContestParticipantResponse) {};
    rpc GenerateContestParticipants(GenerateContestParticipantsRequest) returns(GenerateContestParticipantsResponse) {};
    rpc AddContestAdmin(AddContestAdminRequest) returns(AddContestAdminResponse) {};
    rpc GetContestAdmins(GetContestAdminsRequest) returns(GetContestAdminsResponse) {};
    rpc GetContestParticipants(GetContestParticipantsRequest) returns(GetContestParticipantsResponse) {};
    rpc AddContestProblem(AddContestProblemRequest) returns(AddContestProblemResponse) {};
    rpc DeleteContestProblem(DeleteContestProblemRequest) returns(DeleteContestProblemResponse) {};
    rpc DeleteContestAdmin(DeleteContestAdminRequest) returns(DeleteContestAdminResponse) {};
    rpc UpdateContest(UpdateContestRequest) returns(UpdateContestResponse) {};
    rpc UpdateContestProblems(UpdateContestProblemsRequest) returns(UpdateContestProblemsResponse) {};
    rpc GetContestProblems(GetContestProblemsRequest) returns(GetContestProblemsResponse) {};
    rpc GetUserContests(GetUserContestsRequest) returns(GetUserContestsResponse) {};
}

message GetUserContestsRequest{
    uint64 user_id = 1;
    int32 page_no = 2;
    int32 page_size = 3;
}

message GetUserContestsResponse {
    repeated Contest contests = 1;
    int32 total_pages = 2;
    int32 total_count = 3;
    base.BaseResponse base_response = 4;
}

message GetContestProblemsRequest {
    uint64 contest_id = 1;
}

message GetContestProblemsResponse {
    repeated ContestProblem contest_problems = 1;
    base.BaseResponse base_response = 2;
}

message UpdateContestProblemsRequest {
    uint64 contest_id = 1;
    repeated ContestProblem contest_problems = 2;
}

message UpdateContestProblemsResponse {
    repeated ContestProblem contest_problems = 1;
    base.BaseResponse base_response = 2;
}

message UpdateContestRequest {
    uint64 contest_id = 1;
    Contest contest = 2;
}

message UpdateContestResponse {
    Contest contest = 1;
    base.BaseResponse base_response = 2;
}

message AddContestProblemRequest {
    uint64 contest_id = 1;
    uint64 problem_id = 2;
}

message AddContestProblemResponse {
    base.BaseResponse base_response = 1;
}

message DeleteContestProblemRequest {
    uint64 contest_id = 1;
    uint64 problem_id = 2;
}

message DeleteContestProblemResponse {
    base.BaseResponse base_response = 1;
}

message DeleteContestAdminRequest {
    uint64 contest_id = 1;
    uint64 user_id = 2;
}

message DeleteContestAdminResponse {
    base.BaseResponse base_response = 1;
}

message ListProblemsRequest {
    int32 page_no = 1;
    int32 page_size = 2;
}

message ListProblemsResponse {
    repeated Problem problems = 1;
    int32 total_pages = 2;
    int32 total_count = 3;
    base.BaseResponse base_response = 4;
}

message GetProblemByIdRequest {
    uint64 problem_id = 1;
}

message GetProblemByIdResponse {
    Problem problem = 1;
    base.BaseResponse base_response = 2;
}

message SearchProblemByConditionRequest {
    string title = 1;
    uint64 problem_id = 2;
    int32 source_oj = 3;
    int32 page_no = 4;
    int32 page_size = 5;
}

message SearchProblemByConditionResponse {
    repeated Problem problems = 1;
    int32 total_pages = 2;
    int32 total_count = 3;
    base.BaseResponse base_response = 4;
}

message CreateContestRequest {
    Contest contest = 1;
    repeated ContestProblem contest_problems = 2;
}

message CreateContestResponse {
    Contest contest = 1;
    base.BaseResponse base_response = 2;
}

message ListContestsRequest {
    int32 page_no = 1;
    int32 page_size = 2;
}

message ListContestsResponse {
    repeated Contest contests = 1;
    int32 total_pages = 2;
    int32 total_count = 3;
    base.BaseResponse base_response = 4;
}

message SearchContestByConditionRequest {
    int32 status = 1;
    string title = 2;
    string creator_name = 3;
    int32 page_no = 4;
    int32 page_size = 5;
}

message SearchContestByConditionResponse {
    repeated Contest contests = 1;
    int32 total_pages = 2;
    int32 total_count = 3;
    base.BaseResponse base_response = 4;
}

message GetContestByIdRequest {
    uint64 contest_id = 1;
}

message GetContestByIdResponse {
    Contest contest = 1;
    base.BaseResponse base_response = 2;
}

message AddContestParticipantRequest {
    uint64 contest_id = 1;
    uint64 user_id = 2;
}

message AddContestParticipantResponse {
    base.BaseResponse base_response = 1;
}

message GenerateContestParticipantsRequest {
    uint64 contest_id = 1;
    int32 generate_count = 2;
}

message GenerateContestParticipantsResponse {
    repeated User users = 1;
    base.BaseResponse base_response = 2;
}

message AddContestAdminRequest {
    uint64 contest_id = 1;
    uint64 user_id = 2;
}

message AddContestAdminResponse {
    base.BaseResponse base_response = 1;
}

message GetContestAdminsRequest {
    uint64 contest_id = 1;
}

message GetContestAdminsResponse {
    repeated User users = 1;
    base.BaseResponse base_response = 2;
}

message GetContestParticipantsRequest {
    uint64 contest_id = 1;
}

message GetContestParticipantsResponse {
    repeated User users = 1;
    base.BaseResponse base_response = 2;
}